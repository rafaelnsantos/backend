%prod.mp.jwt.verify.publickey.location=publicKey.pem
mp.jwt.verify.publickey.location=publicKey.dev.pem
mp.jwt.verify.issuer=${JWT_ISSUER:https://example.com/issuer}
jwt.refresh.token.expiration=2592000
jwt.refresh.token.name=refreshToken
jwt.token.expiration=600
jwt.token.name=token
quarkus.native.resources.includes[*]=publicKey.pem,privateKey.pem

%prod.smallrye.jwt.sign.key.location=privateKey.pem
smallrye.jwt.sign.key.location=privateKey.dev.pem

# configure your datasource
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=${DB_USER:postgres}
quarkus.datasource.password=${DB_PASSWORD:postgres}
quarkus.datasource.jdbc.url=${JDBC_URL:jdbc:postgresql://localhost:54321/quarkus}

quarkus.redis.hosts=${REDIS_HOST:redis://localhost:6380/}

# drop and create the database at startup (use `update` to only update the schema)
%prod.quarkus.hibernate-orm.database.generation=update
%dev.quarkus.hibernate-orm.database.generation=update

quarkus.hibernate-orm.database.generation.create-schemas=true

quarkus.http.cors=true
quarkus.http.cors.origins=*
%dev.quarkus.http.cors.origins=${CORS_ORIGINS:http://localhost:4200,http://192.168.1.187:4200}
quarkus.webauthn.origins=${CORS_ORIGINS:http://localhost:4200,http://192.168.1.187:4200}
quarkus.http.cors.headers=accept,authorization,content-type,x-requested-with
quarkus.http.cors.methods=GET,OPTIONS,POST

quarkus.native.additional-build-args=--initialize-at-run-time=tech.monx.RandomWrapper

quarkus.http.auth.session.encryption-key=${SESSION_ENCRYPTION_KEY:devSessionEncryptionKey}

quarkus.http.host=0.0.0.0